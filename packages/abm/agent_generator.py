import random
from packages.abm.agent import Agent


class AgentGenerator:
    """
    Defines functionality for generating the required number of Agents which match specified properties
    (i.e. the correct number of infected, distancing, masked, vaccinated).

    Mask and distancing properties are set independent of each other.
    - Agents are randomly chosen among infected and vaccinated when deciding which Agents are masked.
    - Agents are randomly chosen among infected and vaccinated when deciding which Agents are distancing.

    Fields:

        num_distancing: the number of Agents which have distancing=True property at the start

        num_mask: the number of Agents which are masked at the start

        num_vaccinated: the number of Agents which are in a recovered state at the start
    """

    def __init__(self, m, num_infected, percent_distancing, percent_mask, percent_vaccinated=0.0):
        """
        Sets the number of distancing, masked, and vaccinated Agents which will be generated by generate_agents().
        :param m: the number of Agents to be generated
        :param num_infected: the number of Agents set as infected at the start
        :param percent_distancing: the percent of Agents which have distancing=True property at the start
        :param percent_mask: the percent of Agents which are masked at the start
        :param percent_vaccinated: the percent of Agents which are in a recovered state at the start
        """

        # capture parameters
        self.m = m
        self.num_infected = num_infected

        # set discrete numbers for distancing, mask, vaccinated
        self.num_distancing = int(round(percent_distancing * m))
        self.num_mask = int(round(percent_mask * m))
        self.num_vaccinated = int(round(percent_vaccinated * m))

        # validation checks
        if self.num_infected + self.num_vaccinated > m:
            raise ValueError('not allowed to have (infected + vaccinated) > total number of agents')

    def is_infected(self, current_infected):
        """
        Calculates whether the Agent currently under consideration should have its status set to Infected.

        :param current_infected: Number of generated Agents which have Infected status
        :return: True if there should be more infected agents in order to reach
        the required number of infected Agents, False otherwise.
        """
        return current_infected < self.num_infected

    def is_vaccinated(self, infected, current_vaccinated):
        """
        Given the current number of vaccinated Agents and whether this Agent is infected, calculates whether this
        Agent should have its status set to Recovered.

        :param infected: True if Agent is infected.
        :param current_vaccinated: Number of generated Agents which have Recovered status
        :return: True if the agent is not infected and there should be more vaccinated agents to reach the required
        number of vaccinated Agents, False otherwise.
        """
        if infected:
            return False  # can't be both infected and vaccinated
        else:
            return current_vaccinated < self.num_vaccinated

    def get_status(self, infected, vaccinated):
        """
        Used to help determine which status should be chosen for the Agent currently under consideration.

        - If infected, returns 'I'.
        - If vaccinated, returns 'R'.
        - If neither infected nor vaccinated, returns 'S'.

        Raises a ValueError if Agent is both infected and vaccinated (not allowed in this model).
        :param infected: True if Agent is infected.
        :param vaccinated: True if Agent is vaccinated.
        :return: Single letter string indicating the status to be set for the Agent currently under consideration.
        """
        if infected and vaccinated:
            raise ValueError('Agent is not allowed to be both infected and vaccinated.')

        if infected:
            status = 'I'
        elif vaccinated:
            status = 'R'
        else:
            status = 'S'

        return status

    def select_indexes(self, p):
        """
        Selects p random positions between 0 and m-1.
        :param p: The number of random positions to select.
        :return: List of integers representing selected positions in the Agents list.
        """

        chosen = list()
        for i in range(p):

            position = random.randint(0, self.m - 1)
            while position in chosen:
                # try again
                position = random.randint(0, self.m - 1)

            chosen.append(position)
        return chosen

    def generate_agents(self):
        """
        Creates and returns a list of m agents, each created with a randomly chosen position from the n x n grid, with
        the required number of agents selected as infected and vaccinated.

        After setting status, randomly selects agents to be masked.
        Separately from mask, randomly selects agents to be distancing.

        :return: List of generated Agents.
        """

        # create agents
        agents = list()

        # set counters
        current_infected = 0
        current_vaccinated = 0

        # randomly select indexes for mask and distancing
        mask_indexes = self.select_indexes(self.num_mask)
        distancing_indexes = self.select_indexes(self.num_distancing)

        for i in range(self.m):

            # select if agent is infected
            infected = self.is_infected(current_infected)
            if infected:
                current_infected += 1

            # select if agent is vaccinated
            vaccinated = self.is_vaccinated(infected, current_vaccinated)
            if vaccinated:
                current_vaccinated += 1

            # set status
            status = self.get_status(infected, vaccinated)

            # set values for mask and distancing
            mask = i in mask_indexes
            distancing = i in distancing_indexes

            # position will be set later
            new_agent = Agent((-1, -1), status, mask=mask, distancing=distancing)
            agents.append(new_agent)

        return agents
